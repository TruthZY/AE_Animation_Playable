//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/AE_Motion/PlayerInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace AE_Motion
{
    public partial class @PlayerInputAction : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInputAction()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputAction"",
    ""maps"": [
        {
            ""name"": ""Simple"",
            ""id"": ""d6287e63-7513-43d3-938a-3d1895bbfe4f"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""3e632e65-93f7-4493-bfa6-bff8e35c7075"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""3edc8d3d-a574-46a2-9b3d-3070a80077a1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""927726ce-627e-47a1-aa0e-3ed687155b28"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Climb"",
                    ""type"": ""Button"",
                    ""id"": ""170f087b-f164-4ee3-beac-a6dc77318baf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousesXY"",
                    ""type"": ""Value"",
                    ""id"": ""c26d1f58-dff7-4676-987e-a6bbb2ee79cf"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""1cfceefb-5e69-4c9f-830b-b5262c102ace"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""d16414e6-09fe-46fc-af56-24f695d25b8c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeybrodAndMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""0e47c10a-743b-464b-9c98-ab74b1c87633"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeybrodAndMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6ebd3185-fae6-4fda-95e6-555dec2eeb0d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeybrodAndMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f1e8a10d-658f-4356-ad09-d52af949515c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeybrodAndMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""0502364a-c8fc-471a-82b6-42433b4a2397"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeybrodAndMouse"",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9440e1b0-ed98-450f-b08b-8918342a1f6b"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b6760588-6031-40d8-b170-ee2e7f34a8ad"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Climb"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7293a35b-8bea-4c08-850f-74d559cddae0"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousesXY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeybrodAndMouse"",
            ""bindingGroup"": ""KeybrodAndMouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Simple
            m_Simple = asset.FindActionMap("Simple", throwIfNotFound: true);
            m_Simple_Move = m_Simple.FindAction("Move", throwIfNotFound: true);
            m_Simple_Run = m_Simple.FindAction("Run", throwIfNotFound: true);
            m_Simple_Jump = m_Simple.FindAction("Jump", throwIfNotFound: true);
            m_Simple_Climb = m_Simple.FindAction("Climb", throwIfNotFound: true);
            m_Simple_MousesXY = m_Simple.FindAction("MousesXY", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Simple
        private readonly InputActionMap m_Simple;
        private ISimpleActions m_SimpleActionsCallbackInterface;
        private readonly InputAction m_Simple_Move;
        private readonly InputAction m_Simple_Run;
        private readonly InputAction m_Simple_Jump;
        private readonly InputAction m_Simple_Climb;
        private readonly InputAction m_Simple_MousesXY;
        public struct SimpleActions
        {
            private @PlayerInputAction m_Wrapper;
            public SimpleActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_Simple_Move;
            public InputAction @Run => m_Wrapper.m_Simple_Run;
            public InputAction @Jump => m_Wrapper.m_Simple_Jump;
            public InputAction @Climb => m_Wrapper.m_Simple_Climb;
            public InputAction @MousesXY => m_Wrapper.m_Simple_MousesXY;
            public InputActionMap Get() { return m_Wrapper.m_Simple; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(SimpleActions set) { return set.Get(); }
            public void SetCallbacks(ISimpleActions instance)
            {
                if (m_Wrapper.m_SimpleActionsCallbackInterface != null)
                {
                    @Move.started -= m_Wrapper.m_SimpleActionsCallbackInterface.OnMove;
                    @Move.performed -= m_Wrapper.m_SimpleActionsCallbackInterface.OnMove;
                    @Move.canceled -= m_Wrapper.m_SimpleActionsCallbackInterface.OnMove;
                    @Run.started -= m_Wrapper.m_SimpleActionsCallbackInterface.OnRun;
                    @Run.performed -= m_Wrapper.m_SimpleActionsCallbackInterface.OnRun;
                    @Run.canceled -= m_Wrapper.m_SimpleActionsCallbackInterface.OnRun;
                    @Jump.started -= m_Wrapper.m_SimpleActionsCallbackInterface.OnJump;
                    @Jump.performed -= m_Wrapper.m_SimpleActionsCallbackInterface.OnJump;
                    @Jump.canceled -= m_Wrapper.m_SimpleActionsCallbackInterface.OnJump;
                    @Climb.started -= m_Wrapper.m_SimpleActionsCallbackInterface.OnClimb;
                    @Climb.performed -= m_Wrapper.m_SimpleActionsCallbackInterface.OnClimb;
                    @Climb.canceled -= m_Wrapper.m_SimpleActionsCallbackInterface.OnClimb;
                    @MousesXY.started -= m_Wrapper.m_SimpleActionsCallbackInterface.OnMousesXY;
                    @MousesXY.performed -= m_Wrapper.m_SimpleActionsCallbackInterface.OnMousesXY;
                    @MousesXY.canceled -= m_Wrapper.m_SimpleActionsCallbackInterface.OnMousesXY;
                }
                m_Wrapper.m_SimpleActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Move.started += instance.OnMove;
                    @Move.performed += instance.OnMove;
                    @Move.canceled += instance.OnMove;
                    @Run.started += instance.OnRun;
                    @Run.performed += instance.OnRun;
                    @Run.canceled += instance.OnRun;
                    @Jump.started += instance.OnJump;
                    @Jump.performed += instance.OnJump;
                    @Jump.canceled += instance.OnJump;
                    @Climb.started += instance.OnClimb;
                    @Climb.performed += instance.OnClimb;
                    @Climb.canceled += instance.OnClimb;
                    @MousesXY.started += instance.OnMousesXY;
                    @MousesXY.performed += instance.OnMousesXY;
                    @MousesXY.canceled += instance.OnMousesXY;
                }
            }
        }
        public SimpleActions @Simple => new SimpleActions(this);
        private int m_KeybrodAndMouseSchemeIndex = -1;
        public InputControlScheme KeybrodAndMouseScheme
        {
            get
            {
                if (m_KeybrodAndMouseSchemeIndex == -1) m_KeybrodAndMouseSchemeIndex = asset.FindControlSchemeIndex("KeybrodAndMouse");
                return asset.controlSchemes[m_KeybrodAndMouseSchemeIndex];
            }
        }
        public interface ISimpleActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnRun(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
            void OnClimb(InputAction.CallbackContext context);
            void OnMousesXY(InputAction.CallbackContext context);
        }
    }
}
